{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PAnh\\\\Number Guessing\\\\num\\\\my-app\\\\src\\\\Components\\\\GameLevel.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../CSS/Level.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameLevel = ({\n  level,\n  imageSrc,\n  initialAttempts\n}) => {\n  _s();\n  const minNum = 1;\n  const maxNum = 100;\n  const [answer] = useState(Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum);\n  const [attempts, setAttempts] = useState(initialAttempts);\n  const [feedback, setFeedback] = useState('');\n  const [guess, setGuess] = useState('');\n  const [isGameOver, setIsGameOver] = useState(false);\n  const navigate = useNavigate();\n  const handleGuess = () => {\n    const guessNum = Number(guess);\n    if (!guessNum || guessNum < minNum || guessNum > maxNum) {\n      setFeedback('Please enter a valid number between 1 and 100.');\n      return;\n    }\n    if (guessNum === answer) {\n      setFeedback('ðŸŽ‰ Congratulations! You guessed the correct number!');\n      setIsGameOver(true);\n    } else {\n      const newAttempts = attempts - 1;\n      setAttempts(newAttempts);\n      if (newAttempts === 0) {\n        setFeedback(`ðŸ˜ž Game Over! The number was ${answer}.`);\n        setIsGameOver(true);\n      } else {\n        setFeedback(guessNum > answer ? 'ðŸ“‰ Too high!' : 'ðŸ“ˆ Too low!');\n      }\n    }\n    setGuess('');\n  };\n  const restartGame = () => {\n    setAttempts(initialAttempts);\n    setFeedback('');\n    setGuess('');\n    setIsGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"level-panel active\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Level \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: guess,\n      onChange: e => setGuess(e.target.value),\n      placeholder: \"Enter your guess\",\n      disabled: isGameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGuess,\n      disabled: isGameOver,\n      children: \"Guess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Attempts Left: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: attempts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageSrc,\n      alt: `Level ${level} Image`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: restartGame,\n      children: \"Restart Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate('/choose'),\n      className: \"exit-btn\",\n      children: \"Exit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(GameLevel, \"U19KjNRl6HsbTKVoKAVe5fWc/Ts=\", false, function () {\n  return [useNavigate];\n});\n_c = GameLevel;\nexport default GameLevel;\nvar _c;\n$RefreshReg$(_c, \"GameLevel\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","GameLevel","level","imageSrc","initialAttempts","_s","minNum","maxNum","answer","Math","floor","random","attempts","setAttempts","feedback","setFeedback","guess","setGuess","isGameOver","setIsGameOver","navigate","handleGuess","guessNum","Number","newAttempts","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","disabled","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/PAnh/Number Guessing/num/my-app/src/Components/GameLevel.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../CSS/Level.css';\r\n\r\nconst GameLevel = ({ level, imageSrc, initialAttempts }) => {\r\n  const minNum = 1;\r\n  const maxNum = 100;\r\n  const [answer] = useState(Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum);\r\n  const [attempts, setAttempts] = useState(initialAttempts);\r\n  const [feedback, setFeedback] = useState('');\r\n  const [guess, setGuess] = useState('');\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleGuess = () => {\r\n    const guessNum = Number(guess);\r\n    if (!guessNum || guessNum < minNum || guessNum > maxNum) {\r\n      setFeedback('Please enter a valid number between 1 and 100.');\r\n      return;\r\n    }\r\n\r\n    if (guessNum === answer) {\r\n      setFeedback('ðŸŽ‰ Congratulations! You guessed the correct number!');\r\n      setIsGameOver(true);\r\n    } else {\r\n      const newAttempts = attempts - 1;\r\n      setAttempts(newAttempts);\r\n      if (newAttempts === 0) {\r\n        setFeedback(`ðŸ˜ž Game Over! The number was ${answer}.`);\r\n        setIsGameOver(true);\r\n      } else {\r\n        setFeedback(guessNum > answer ? 'ðŸ“‰ Too high!' : 'ðŸ“ˆ Too low!');\r\n      }\r\n    }\r\n    setGuess('');\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setAttempts(initialAttempts);\r\n    setFeedback('');\r\n    setGuess('');\r\n    setIsGameOver(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"level-panel active\">\r\n      <h2>Level {level}</h2>\r\n      <input\r\n        type=\"number\"\r\n        value={guess}\r\n        onChange={(e) => setGuess(e.target.value)}\r\n        placeholder=\"Enter your guess\"\r\n        disabled={isGameOver}\r\n      />\r\n      <button onClick={handleGuess} disabled={isGameOver}>Guess</button>\r\n      <p>{feedback}</p>\r\n      <p>Attempts Left: <span>{attempts}</span></p>\r\n      <img src={imageSrc} alt={`Level ${level} Image`} />\r\n      {isGameOver && <button onClick={restartGame}>Restart Game</button>}\r\n      <button onClick={() => navigate('/choose')} className=\"exit-btn\">Exit</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameLevel;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAMC,MAAM,GAAG,CAAC;EAChB,MAAMC,MAAM,GAAG,GAAG;EAClB,MAAM,CAACC,MAAM,CAAC,GAAGX,QAAQ,CAACY,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIJ,MAAM,GAAGD,MAAM,GAAG,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC;EACrF,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAACO,eAAe,CAAC;EACzD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMuB,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAE9B,MAAMuB,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,QAAQ,GAAGC,MAAM,CAACP,KAAK,CAAC;IAC9B,IAAI,CAACM,QAAQ,IAAIA,QAAQ,GAAGhB,MAAM,IAAIgB,QAAQ,GAAGf,MAAM,EAAE;MACvDQ,WAAW,CAAC,gDAAgD,CAAC;MAC7D;IACF;IAEA,IAAIO,QAAQ,KAAKd,MAAM,EAAE;MACvBO,WAAW,CAAC,qDAAqD,CAAC;MAClEI,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACL,MAAMK,WAAW,GAAGZ,QAAQ,GAAG,CAAC;MAChCC,WAAW,CAACW,WAAW,CAAC;MACxB,IAAIA,WAAW,KAAK,CAAC,EAAE;QACrBT,WAAW,CAAC,gCAAgCP,MAAM,GAAG,CAAC;QACtDW,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,MAAM;QACLJ,WAAW,CAACO,QAAQ,GAAGd,MAAM,GAAG,cAAc,GAAG,aAAa,CAAC;MACjE;IACF;IACAS,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBZ,WAAW,CAACT,eAAe,CAAC;IAC5BW,WAAW,CAAC,EAAE,CAAC;IACfE,QAAQ,CAAC,EAAE,CAAC;IACZE,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,oBACEnB,OAAA;IAAK0B,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjC3B,OAAA;MAAA2B,QAAA,GAAI,QAAM,EAACzB,KAAK;IAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACtB/B,OAAA;MACEgC,IAAI,EAAC,QAAQ;MACbC,KAAK,EAAEjB,KAAM;MACbkB,QAAQ,EAAGC,CAAC,IAAKlB,QAAQ,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,WAAW,EAAC,kBAAkB;MAC9BC,QAAQ,EAAEpB;IAAW;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACF/B,OAAA;MAAQuC,OAAO,EAAElB,WAAY;MAACiB,QAAQ,EAAEpB,UAAW;MAAAS,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClE/B,OAAA;MAAA2B,QAAA,EAAIb;IAAQ;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB/B,OAAA;MAAA2B,QAAA,GAAG,iBAAe,eAAA3B,OAAA;QAAA2B,QAAA,EAAOf;MAAQ;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7C/B,OAAA;MAAKwC,GAAG,EAAErC,QAAS;MAACsC,GAAG,EAAE,SAASvC,KAAK;IAAS;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAClDb,UAAU,iBAAIlB,OAAA;MAAQuC,OAAO,EAAEd,WAAY;MAAAE,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClE/B,OAAA;MAAQuC,OAAO,EAAEA,CAAA,KAAMnB,QAAQ,CAAC,SAAS,CAAE;MAACM,SAAS,EAAC,UAAU;MAAAC,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA1DIJ,SAAS;EAAA,QAQIH,WAAW;AAAA;AAAA4C,EAAA,GARxBzC,SAAS;AA4Df,eAAeA,SAAS;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}