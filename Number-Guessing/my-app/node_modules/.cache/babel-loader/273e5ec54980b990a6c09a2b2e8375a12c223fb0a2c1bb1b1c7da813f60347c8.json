{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n\n// const Play = ({ remainingTime, attemptsLeft }) => {\n//   const [time, setRemainingTime] = useState(remainingTime); \n//   const [attempts, setAttemptsLeft] = useState(attemptsLeft); \n//   const [guessedNumbers, setGuessedNumbers] = useState([]); \n//   const [currentGuess, setCurrentGuess] = useState(''); \n\n//   useEffect(() => {\n//     setRemainingTime(remainingTime); \n//   }, [remainingTime]);\n\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       setRemainingTime((prevTime) => {\n//         if (prevTime <= 1) {\n//           clearInterval(timer);\n//           return 0; \n//         }\n//         return prevTime - 1;\n//       });\n//     }, 1000);\n\n//     return () => clearInterval(timer); \n//   }, []);\n\n//   const handleGuess = () => {\n//     const number = parseInt(currentGuess); \n\n//     if (attempts > 0 && time > 0 && !isNaN(number)) {\n//       setGuessedNumbers((prevGuesses) => [...prevGuesses, number]);\n//       setAttemptsLeft((prevAttempts) => prevAttempts - 1);\n//       setCurrentGuess(''); \n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"info-panel\">\n//         <h3>Game information</h3>\n//         <p>Time remaining: {time} second</p>\n//         <p>\n//         Guessed number: {guessedNumbers.join(', ')}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Play;","map":{"version":3,"names":[],"sources":["C:/Users/PAnh/Number Guessing/num/my-app/src/Components/Play.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const Play = ({ remainingTime, attemptsLeft }) => {\r\n//   const [time, setRemainingTime] = useState(remainingTime); \r\n//   const [attempts, setAttemptsLeft] = useState(attemptsLeft); \r\n//   const [guessedNumbers, setGuessedNumbers] = useState([]); \r\n//   const [currentGuess, setCurrentGuess] = useState(''); \r\n\r\n//   useEffect(() => {\r\n//     setRemainingTime(remainingTime); \r\n//   }, [remainingTime]);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       setRemainingTime((prevTime) => {\r\n//         if (prevTime <= 1) {\r\n//           clearInterval(timer);\r\n//           return 0; \r\n//         }\r\n//         return prevTime - 1;\r\n//       });\r\n//     }, 1000);\r\n\r\n//     return () => clearInterval(timer); \r\n//   }, []);\r\n\r\n//   const handleGuess = () => {\r\n//     const number = parseInt(currentGuess); \r\n\r\n//     if (attempts > 0 && time > 0 && !isNaN(number)) {\r\n//       setGuessedNumbers((prevGuesses) => [...prevGuesses, number]);\r\n//       setAttemptsLeft((prevAttempts) => prevAttempts - 1);\r\n//       setCurrentGuess(''); \r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"info-panel\">\r\n//         <h3>Game information</h3>\r\n//         <p>Time remaining: {time} second</p>\r\n//         <p>\r\n//         Guessed number: {guessedNumbers.join(', ')}</p>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Play;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}