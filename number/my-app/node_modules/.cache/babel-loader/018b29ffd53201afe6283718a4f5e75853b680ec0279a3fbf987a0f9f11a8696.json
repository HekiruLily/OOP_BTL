{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PAnh\\\\Number Guessing\\\\num\\\\my-app\\\\src\\\\Components\\\\Play.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Play = ({\n  remainingTime,\n  attemptsLeft,\n  totalAttempts\n}) => {\n  _s();\n  const [time, setRemainingTime] = useState(remainingTime);\n  const [attempts, setAttemptsLeft] = useState(attemptsLeft);\n  const [guessedNumbers, setGuessedNumbers] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  useEffect(() => {\n    setRemainingTime(remainingTime);\n  }, [remainingTime]);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setRemainingTime(prevTime => {\n        if (prevTime <= 1) {\n          clearInterval(timer);\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n  const handleGuess = () => {\n    const number = parseInt(currentGuess);\n    if (attempts > 0 && time > 0 && !isNaN(number)) {\n      setGuessedNumbers(prevGuesses => [...prevGuesses, number]);\n      setAttemptsLeft(prevAttempts => prevAttempts - 1);\n      setCurrentGuess('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time remaining: \", time, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total attempts: \", totalAttempts]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Remaining attempts: \", attempts]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: currentGuess,\n        onChange: e => setCurrentGuess(e.target.value),\n        placeholder: \"Enter your guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuess,\n        disabled: attempts <= 0 || time <= 0,\n        children: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Play, \"GV3NALaizhVOTSbokZvBm7K88QY=\");\n_c = Play;\nexport default Play;\nvar _c;\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Play","remainingTime","attemptsLeft","totalAttempts","_s","time","setRemainingTime","attempts","setAttemptsLeft","guessedNumbers","setGuessedNumbers","currentGuess","setCurrentGuess","timer","setInterval","prevTime","clearInterval","handleGuess","number","parseInt","isNaN","prevGuesses","prevAttempts","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/PAnh/Number Guessing/num/my-app/src/Components/Play.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Play = ({ remainingTime, attemptsLeft, totalAttempts }) => {\r\n  const [time, setRemainingTime] = useState(remainingTime); \r\n  const [attempts, setAttemptsLeft] = useState(attemptsLeft); \r\n  const [guessedNumbers, setGuessedNumbers] = useState([]); \r\n  const [currentGuess, setCurrentGuess] = useState(''); \r\n\r\n  useEffect(() => {\r\n    setRemainingTime(remainingTime); \r\n  }, [remainingTime]);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setRemainingTime((prevTime) => {\r\n        if (prevTime <= 1) {\r\n          clearInterval(timer);\r\n          return 0; \r\n        }\r\n        return prevTime - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer); \r\n  }, []);\r\n\r\n  const handleGuess = () => {\r\n    const number = parseInt(currentGuess); \r\n\r\n    if (attempts > 0 && time > 0 && !isNaN(number)) {\r\n      setGuessedNumbers((prevGuesses) => [...prevGuesses, number]);\r\n      setAttemptsLeft((prevAttempts) => prevAttempts - 1);\r\n      setCurrentGuess(''); \r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"info-panel\">\r\n        <p>Time remaining: {time} seconds</p>\r\n        <p>Total attempts: {totalAttempts}</p>\r\n        <p>Remaining attempts: {attempts}</p>\r\n      </div>\r\n      <div className=\"guess-input\">\r\n        <input \r\n          type=\"number\" \r\n          value={currentGuess} \r\n          onChange={(e) => setCurrentGuess(e.target.value)} \r\n          placeholder=\"Enter your guess\" \r\n        />\r\n        <button onClick={handleGuess} disabled={attempts <= 0 || time <= 0}>\r\n          Guess\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Play;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}